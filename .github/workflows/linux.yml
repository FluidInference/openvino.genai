name: Linux CI

on:
  pull_request:
  push:
    branches:
      - master
      - main
      - 'releases/**'

env:
  PYTHON_VERSION: '3.11'

jobs:
  build_and_test:
    name: Build and Test (Ubuntu)
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        build_type: [Release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential ninja-build
      
      - name: Install Python build dependencies
        run: |
          pip install --upgrade pip
          pip install build wheel setuptools
          pip install openvino openvino-dev
      
      - name: Configure CMake
        run: |
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DENABLE_PYTHON=ON \
            -GNinja
      
      - name: Build
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel
      
      - name: Install
        run: |
          cmake --install build --config ${{ matrix.build_type }} --prefix install
      
      - name: Build Python wheel
        run: |
          pip install py-build-cmake
          python -m build --wheel
      
      - name: Install Python package
        run: |
          pip install dist/*.whl
      
      - name: Test Python imports
        run: |
          python -c "import openvino_genai; print('OpenVINO GenAI import successful')"
      
      - name: Build samples
        run: |
          if [ -d "samples/cpp" ]; then
            cmake -B samples_build -S samples/cpp -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
            cmake --build samples_build --config ${{ matrix.build_type }} --parallel
          fi
      
      - name: Test basic functionality
        run: |
          if [ -f "tests/python_tests/test_tokenizer.py" ]; then
            pip install pytest
            pip install -r tests/python_tests/requirements.txt || echo "No requirements file found"
            python -m pytest tests/python_tests/test_tokenizer.py -v || echo "Some tests may require additional models"
          fi